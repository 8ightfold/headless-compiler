//===- Std/new ------------------------------------------------------===//
//
// Copyright (C) 2024 Eightfold
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
//     limitations under the License.
//
//===----------------------------------------------------------------===//

#pragma once
// #pragma clang system_header

#include <Std/cstddef>

extern "C++" {

namespace std {
  enum class align_val_t : usize {};

  struct nothrow_t {
    explicit nothrow_t() = default;
  };

  inline constexpr align_val_t align_val {};
  inline constexpr nothrow_t nothrow {};

  using new_handler = void(*)();

  // TODO: [set|get]_new_handler(...)
  // new_handler set_new_handler(new_handler) throw()
  // new_handler get_new_handler() noexcept
} // namespace std

[[nodiscard]] inline void* 
 operator new(std::size_t, void* __p) __noexcept {
  return __p;
}
[[nodiscard]] inline void* 
 operator new[](std::size_t, void* __p) __noexcept {
  return __p;
}

inline void operator delete(void*, void*) noexcept {}
inline void operator delete[](void*, void*) noexcept {}

} // extern "C++"
