//===- Std/memory ---------------------------------------------------===//
//
// Copyright (C) 2024 Eightfold
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
//     limitations under the License.
//
//===----------------------------------------------------------------===//

#pragma once
#pragma clang system_header

#include <Std/new>

extern "C++" {

namespace std {
  template <typename _Ty, typename..._Args>
  [[gnu::nodebug, gnu::always_inline, gnu::flatten]]
  inline constexpr auto construct_at(_Ty* __p, _Args&&...__args)
   noexcept(noexcept(::new((void*)0) _Ty(__hc_fwd(__args)...)))
   -> decltype(::new((void*)0) _Ty(__hc_fwd(__args)...)) {
    return ::new((void*)__p) _Ty(__hc_fwd(__args)...);
  }

  template <typename _Ty>
  [[gnu::nodebug, gnu::always_inline, gnu::flatten]]
  inline constexpr void destroy_at(_Ty* __p) noexcept {
    if constexpr (__is_array(_Ty)) {
      for (auto& __elem : *__p)
        std::destroy_at(__builtin_addressof(__elem));
    } else {
      __p->~_Ty();
    }
  }
} // namespace std

} // extern "C++"
