//===- Std/utility --------------------------------------------------===//
//
// Copyright (C) 2024 Eightfold
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
//     limitations under the License.
//
//===----------------------------------------------------------------===//

#pragma once
#pragma clang system_header

#include <Meta/Objects.hpp>
#include <Std/cstddef>

extern "C++" {

namespace std {
  template <typename>
  struct tuple_size;

  template <size_t, typename>
  struct tuple_element;

  template <typename T>
  inline constexpr size_t tuple_size_v = tuple_size<T>::value;

  template <size_t N, typename T>
  using tuple_element_t = typename tuple_element<N, T>::type;
} // namespace std

} // extern "C++"
